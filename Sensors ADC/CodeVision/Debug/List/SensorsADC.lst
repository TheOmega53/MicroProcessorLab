
AVRASM ver. 2.1.30  D:\Studies\Microprocessor Lab\Projects\Sensors ADC\CodeVision\Debug\List\SensorsADC.asm Mon Nov 25 14:47:06 2019

D:\Studies\Microprocessor Lab\Projects\Sensors ADC\CodeVision\Debug\List\SensorsADC.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Studies\Microprocessor Lab\Projects\Sensors ADC\CodeVision\Debug\List\SensorsADC.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Studies\Microprocessor Lab\Projects\Sensors ADC\CodeVision\Debug\List\SensorsADC.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 006b 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 3130
00002b 3332
00002c 3534
00002d 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
00002e 3938
D:\Studies\Microprocessor Lab\Projects\Sensors ADC\CodeVision\Debug\List\SensorsADC.asm(1123): warning: .cseg .db misalignment - padding zero byte
00002f 0000      	.DB  0x38,0x39,0x0
                 _0x0:
000030 4441
000031 2043
000032 6156
000033 756c      	.DB  0x41,0x44,0x43,0x20,0x56,0x61,0x6C,0x75
000034 3a65
000035 5400
000036 7268
000037 7365      	.DB  0x65,0x3A,0x0,0x54,0x68,0x72,0x65,0x73
000038 6f68
000039 646c
00003a 003a      	.DB  0x68,0x6F,0x6C,0x64,0x3A,0x0
                 _0x2000003:
00003b c080
00003c 0000      	.DB  0x80,0xC0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00003d 000b      	.DW  0x0B
00003e 0178      	.DW  _arr_G000
00003f 0054      	.DW  _0x3*2
                 
000040 000b      	.DW  0x0B
000041 0160      	.DW  _0x7
000042 0060      	.DW  _0x0*2
                 
000043 000b      	.DW  0x0B
000044 016b      	.DW  _0x7+11
000045 006b      	.DW  _0x0*2+11
                 
000046 0004      	.DW  0x04
000047 0188      	.DW  __base_y_G100
000048 0076      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bffb      	OUT  GICR,R31
00004f bfeb      	OUT  GICR,R30
000050 bfe5      	OUT  MCUCR,R30
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;static unsigned int result;
                 ;static char arr[11] = "0123456789";
                 
                 	.DSEG
                 ;static char test;
                 ;static unsigned int threshhold;
                 ;static unsigned int delay_time;
                 ;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00006b 920a      	ST   -Y,R0
00006c 921a      	ST   -Y,R1
00006d 92fa      	ST   -Y,R15
00006e 936a      	ST   -Y,R22
00006f 937a      	ST   -Y,R23
000070 938a      	ST   -Y,R24
000071 939a      	ST   -Y,R25
000072 93aa      	ST   -Y,R26
000073 93ba      	ST   -Y,R27
000074 93ea      	ST   -Y,R30
000075 93fa      	ST   -Y,R31
000076 b7ef      	IN   R30,SREG
000077 93ea      	ST   -Y,R30
                 ; 0000 0013 // Place your code here
                 ; 0000 0014     threshhold = result;
000078 91e0 0176 	LDS  R30,_result_G000
00007a 91f0 0177 	LDS  R31,_result_G000+1
00007c 93e0 0184 	STS  _threshhold_G000,R30
00007e 93f0 0185 	STS  _threshhold_G000+1,R31
                 ; 0000 0015 
                 ; 0000 0016      lcd_gotoxy(12,1);
000080 e0ec      	LDI  R30,LOW(12)
000081 d131      	RCALL SUBOPT_0x0
                 ; 0000 0017      lcd_putchar(arr[threshhold/1000%10]);
000082 d138      	RCALL SUBOPT_0x1
000083 81a0      	LD   R26,Z
000084 d0dd      	RCALL _lcd_putchar
                 ; 0000 0018      lcd_gotoxy(13,1);
000085 e0ed      	LDI  R30,LOW(13)
000086 d12c      	RCALL SUBOPT_0x0
                 ; 0000 0019      lcd_putchar(arr[threshhold/100%10]);
000087 d13f      	RCALL SUBOPT_0x2
                 ; 0000 001A      lcd_gotoxy(14,1);
000088 d12a      	RCALL SUBOPT_0x0
                 ; 0000 001B      lcd_putchar(arr[threshhold/10%10]);
000089 940e 01d6 	CALL SUBOPT_0x3
                 ; 0000 001C      lcd_gotoxy(15,1);
00008b d127      	RCALL SUBOPT_0x0
                 ; 0000 001D      lcd_putchar(arr[threshhold%10]);
00008c 940e 01e5 	CALL SUBOPT_0x4
                 ; 0000 001E }
00008e 91e9      	LD   R30,Y+
00008f bfef      	OUT  SREG,R30
000090 91f9      	LD   R31,Y+
000091 91e9      	LD   R30,Y+
000092 91b9      	LD   R27,Y+
000093 91a9      	LD   R26,Y+
000094 9199      	LD   R25,Y+
000095 9189      	LD   R24,Y+
000096 9179      	LD   R23,Y+
000097 9169      	LD   R22,Y+
000098 90f9      	LD   R15,Y+
000099 9019      	LD   R1,Y+
00009a 9009      	LD   R0,Y+
00009b 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0025 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0026 ADMUX=adc_input | ADC_VREF_TYPE;
00009c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00009d 81e8      	LD   R30,Y
00009e b9e7      	OUT  0x7,R30
                 ; 0000 0027 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0028 delay_us(10);
                +
00009f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a0 958a     +DEC R24
0000a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0029 // Start the AD conversion
                 ; 0000 002A ADCSRA|=(1<<ADSC);
0000a2 9a36      	SBI  0x6,6
                 ; 0000 002B // Wait for the AD conversion to complete
                 ; 0000 002C while ((ADCSRA & (1<<ADIF))==0);
                 _0x4:
0000a3 9b34      	SBIS 0x6,4
0000a4 cffe      	RJMP _0x4
                 ; 0000 002D ADCSRA|=(1<<ADIF);
0000a5 9a34      	SBI  0x6,4
                 ; 0000 002E return ADCW;
0000a6 b1e4      	IN   R30,0x4
0000a7 b1f5      	IN   R31,0x4+1
0000a8 c108      	RJMP _0x2020001
                 ; 0000 002F }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033 // Declare your local variables here
                 ; 0000 0034 
                 ; 0000 0035 // Input/Output Ports initialization
                 ; 0000 0036 // Port A initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbea      	OUT  0x1A,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ab bbeb      	OUT  0x1B,R30
                 ; 0000 003B 
                 ; 0000 003C // Port B initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000ac bbe7      	OUT  0x17,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ad bbe8      	OUT  0x18,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port C initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000ae e0e3      	LDI  R30,LOW(3)
0000af bbe4      	OUT  0x14,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bbe5      	OUT  0x15,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port D initialization
                 ; 0000 0049 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000b2 bbe1      	OUT  0x11,R30
                 ; 0000 004B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b3 e0e8      	LDI  R30,LOW(8)
0000b4 bbe2      	OUT  0x12,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer/Counter 0 initialization
                 ; 0000 004F // Clock source: System Clock
                 ; 0000 0050 // Clock value: Timer 0 Stopped
                 ; 0000 0051 // Mode: Normal top=0xFF
                 ; 0000 0052 // OC0 output: Disconnected
                 ; 0000 0053 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bfe3      	OUT  0x33,R30
                 ; 0000 0054 TCNT0=0x00;
0000b7 bfe2      	OUT  0x32,R30
                 ; 0000 0055 OCR0=0x00;
0000b8 bfec      	OUT  0x3C,R30
                 ; 0000 0056 
                 ; 0000 0057 // Timer/Counter 1 initialization
                 ; 0000 0058 // Clock source: System Clock
                 ; 0000 0059 // Clock value: Timer1 Stopped
                 ; 0000 005A // Mode: Normal top=0xFFFF
                 ; 0000 005B // OC1A output: Disconnected
                 ; 0000 005C // OC1B output: Disconnected
                 ; 0000 005D // Noise Canceler: Off
                 ; 0000 005E // Input Capture on Falling Edge
                 ; 0000 005F // Timer1 Overflow Interrupt: Off
                 ; 0000 0060 // Input Capture Interrupt: Off
                 ; 0000 0061 // Compare A Match Interrupt: Off
                 ; 0000 0062 // Compare B Match Interrupt: Off
                 ; 0000 0063 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b9 bdef      	OUT  0x2F,R30
                 ; 0000 0064 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000ba bdee      	OUT  0x2E,R30
                 ; 0000 0065 TCNT1H=0x00;
0000bb bded      	OUT  0x2D,R30
                 ; 0000 0066 TCNT1L=0x00;
0000bc bdec      	OUT  0x2C,R30
                 ; 0000 0067 ICR1H=0x00;
0000bd bde7      	OUT  0x27,R30
                 ; 0000 0068 ICR1L=0x00;
0000be bde6      	OUT  0x26,R30
                 ; 0000 0069 OCR1AH=0x00;
0000bf bdeb      	OUT  0x2B,R30
                 ; 0000 006A OCR1AL=0x00;
0000c0 bdea      	OUT  0x2A,R30
                 ; 0000 006B OCR1BH=0x00;
0000c1 bde9      	OUT  0x29,R30
                 ; 0000 006C OCR1BL=0x00;
0000c2 bde8      	OUT  0x28,R30
                 ; 0000 006D 
                 ; 0000 006E // Timer/Counter 2 initialization
                 ; 0000 006F // Clock source: System Clock
                 ; 0000 0070 // Clock value: Timer2 Stopped
                 ; 0000 0071 // Mode: Normal top=0xFF
                 ; 0000 0072 // OC2 output: Disconnected
                 ; 0000 0073 ASSR=0<<AS2;
0000c3 bde2      	OUT  0x22,R30
                 ; 0000 0074 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c4 bde5      	OUT  0x25,R30
                 ; 0000 0075 TCNT2=0x00;
0000c5 bde4      	OUT  0x24,R30
                 ; 0000 0076 OCR2=0x00;
0000c6 bde3      	OUT  0x23,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0079 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c7 bfe9      	OUT  0x39,R30
                 ; 0000 007A 
                 ; 0000 007B // External Interrupt(s) initialization
                 ; 0000 007C // INT0: On
                 ; 0000 007D // INT0 Mode: Rising Edge
                 ; 0000 007E // INT1: Off
                 ; 0000 007F // INT2: Off
                 ; 0000 0080 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
0000c8 b7eb      	IN   R30,0x3B
0000c9 68e0      	ORI  R30,0x80
0000ca bfeb      	OUT  0x3B,R30
                 ; 0000 0081 MCUCR=(1<<ISC11) | (1<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000cb e0ec      	LDI  R30,LOW(12)
0000cc bfe5      	OUT  0x35,R30
                 ; 0000 0082 MCUCSR=(0<<ISC2);
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe4      	OUT  0x34,R30
                 ; 0000 0083 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
0000cf e8e0      	LDI  R30,LOW(128)
0000d0 bfea      	OUT  0x3A,R30
                 ; 0000 0084 
                 ; 0000 0085 // USART initialization
                 ; 0000 0086 // USART disabled
                 ; 0000 0087 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 b9ea      	OUT  0xA,R30
                 ; 0000 0088 
                 ; 0000 0089 // Analog Comparator initialization
                 ; 0000 008A // Analog Comparator: Off
                 ; 0000 008B // The Analog Comparator's positive input is
                 ; 0000 008C // connected to the AIN0 pin
                 ; 0000 008D // The Analog Comparator's negative input is
                 ; 0000 008E // connected to the AIN1 pin
                 ; 0000 008F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d3 e8e0      	LDI  R30,LOW(128)
0000d4 b9e8      	OUT  0x8,R30
                 ; 0000 0090 
                 ; 0000 0091 // ADC initialization
                 ; 0000 0092 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0093 // ADC Voltage Reference: AREF pin
                 ; 0000 0094 // ADC Auto Trigger Source: Free Running
                 ; 0000 0095 ADMUX=ADC_VREF_TYPE;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 b9e7      	OUT  0x7,R30
                 ; 0000 0096 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000d7 eae3      	LDI  R30,LOW(163)
0000d8 b9e6      	OUT  0x6,R30
                 ; 0000 0097 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000d9 e0e0      	LDI  R30,LOW(0)
0000da bfe0      	OUT  0x30,R30
                 ; 0000 0098 
                 ; 0000 0099 // SPI initialization
                 ; 0000 009A // SPI disabled
                 ; 0000 009B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000db b9ed      	OUT  0xD,R30
                 ; 0000 009C 
                 ; 0000 009D // TWI initialization
                 ; 0000 009E // TWI disabled
                 ; 0000 009F TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000dc bfe6      	OUT  0x36,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Alphanumeric LCD initialization
                 ; 0000 00A2 // Connections are specified in the
                 ; 0000 00A3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A4 // RS - PORTD Bit 0
                 ; 0000 00A5 // RD - PORTD Bit 1
                 ; 0000 00A6 // EN - PORTD Bit 2
                 ; 0000 00A7 // D4 - PORTD Bit 4
                 ; 0000 00A8 // D5 - PORTD Bit 5
                 ; 0000 00A9 // D6 - PORTD Bit 6
                 ; 0000 00AA // D7 - PORTD Bit 7
                 ; 0000 00AB // Characters/line: 16
                 ; 0000 00AC lcd_init(16);
0000dd e1a0      	LDI  R26,LOW(16)
0000de d0a9      	RCALL _lcd_init
                 ; 0000 00AD 
                 ; 0000 00AE // Global enable interrupts
                 ; 0000 00AF #asm("sei")
0000df 9478      	sei
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2 lcd_clear();
0000e0 d077      	RCALL _lcd_clear
                 ; 0000 00B3 lcd_puts("ADC Value:");
                +
0000e1 e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000e2 e0b1     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000e3 d093      	RCALL _lcd_puts
                 ; 0000 00B4 
                 ; 0000 00B5 lcd_gotoxy(0,1);
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 93ea      	ST   -Y,R30
0000e6 e0a1      	LDI  R26,LOW(1)
0000e7 d063      	RCALL _lcd_gotoxy
                 ; 0000 00B6 lcd_puts("Threshold:");
                +
0000e8 e6ab     +LDI R26 , LOW ( _0x7 + ( 11 ) )
0000e9 e0b1     +LDI R27 , HIGH ( _0x7 + ( 11 ) )
                 	__POINTW2MN _0x7,11
0000ea d08c      	RCALL _lcd_puts
                 ; 0000 00B7 
                 ; 0000 00B8 
                 ; 0000 00B9 while (1)
                 _0x8:
                 ; 0000 00BA       {
                 ; 0000 00BB       // Place your code here
                 ; 0000 00BC          if(delay_time++ > 1000){
0000eb e8a6      	LDI  R26,LOW(_delay_time_G000)
0000ec e0b1      	LDI  R27,HIGH(_delay_time_G000)
0000ed 91ed      	LD   R30,X+
0000ee 91fd      	LD   R31,X+
0000ef 9631      	ADIW R30,1
0000f0 93fe      	ST   -X,R31
0000f1 93ee      	ST   -X,R30
0000f2 9731      	SBIW R30,1
0000f3 3ee9      	CPI  R30,LOW(0x3E9)
0000f4 e0a3      	LDI  R26,HIGH(0x3E9)
0000f5 07fa      	CPC  R31,R26
0000f6 f120      	BRLO _0xB
                 ; 0000 00BD 
                 ; 0000 00BE              result = read_adc(0);
0000f7 e0a0      	LDI  R26,LOW(0)
0000f8 dfa3      	RCALL _read_adc
0000f9 93e0 0176 	STS  _result_G000,R30
0000fb 93f0 0177 	STS  _result_G000+1,R31
                 ; 0000 00BF              lcd_gotoxy(12,0);
0000fd e0ec      	LDI  R30,LOW(12)
0000fe d0ee      	RCALL SUBOPT_0x5
                 ; 0000 00C0              test = arr[result/1000%10];
0000ff d0bb      	RCALL SUBOPT_0x1
000100 81e0      	LD   R30,Z
000101 93e0 0183 	STS  _test_G000,R30
                 ; 0000 00C1              lcd_putchar(arr[result/1000%10]);
000103 91a0 0176 	LDS  R26,_result_G000
000105 91b0 0177 	LDS  R27,_result_G000+1
000107 d0b3      	RCALL SUBOPT_0x1
000108 81a0      	LD   R26,Z
000109 d058      	RCALL _lcd_putchar
                 ; 0000 00C2              lcd_gotoxy(13,0);
00010a e0ed      	LDI  R30,LOW(13)
00010b d0e1      	RCALL SUBOPT_0x5
                 ; 0000 00C3              lcd_putchar(arr[result/100%10]);
00010c d0ba      	RCALL SUBOPT_0x2
                 ; 0000 00C4              lcd_gotoxy(14,0);
00010d d0df      	RCALL SUBOPT_0x5
                 ; 0000 00C5              lcd_putchar(arr[result/10%10]);
00010e d0c7      	RCALL SUBOPT_0x3
                 ; 0000 00C6              lcd_gotoxy(15,0);
00010f d0dd      	RCALL SUBOPT_0x5
                 ; 0000 00C7              lcd_putchar(arr[result%10]);
000110 d0d4      	RCALL SUBOPT_0x4
                 ; 0000 00C8              delay_time = 0;
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 0186 	STS  _delay_time_G000,R30
000114 93e0 0187 	STS  _delay_time_G000+1,R30
                 ; 0000 00C9              PORTC.1 = ~PORTC.1;
000116 9ba9      	SBIS 0x15,1
000117 c002      	RJMP _0xC
000118 98a9      	CBI  0x15,1
000119 c001      	RJMP _0xD
                 _0xC:
00011a 9aa9      	SBI  0x15,1
                 _0xD:
                 ; 0000 00CA          }
                 ; 0000 00CB 
                 ; 0000 00CC 
                 ; 0000 00CD          if(result >= threshhold){
                 _0xB:
00011b 91e0 0184 	LDS  R30,_threshhold_G000
00011d 91f0 0185 	LDS  R31,_threshhold_G000+1
00011f 91a0 0176 	LDS  R26,_result_G000
000121 91b0 0177 	LDS  R27,_result_G000+1
000123 17ae      	CP   R26,R30
000124 07bf      	CPC  R27,R31
000125 f010      	BRLO _0xE
                 ; 0000 00CE             PORTC.0 = 1;
000126 9aa8      	SBI  0x15,0
                 ; 0000 00CF          } else {
000127 c001      	RJMP _0x11
                 _0xE:
                 ; 0000 00D0             PORTC.0 = 0;
000128 98a8      	CBI  0x15,0
                 ; 0000 00D1          }
                 _0x11:
                 ; 0000 00D2       }
000129 cfc1      	RJMP _0x8
                 ; 0000 00D3 }
                 _0x14:
00012a cfff      	RJMP _0x14
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000160           	.BYTE 0x16
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012b 93aa      	ST   -Y,R26
00012c b3e8      	IN   R30,0x18
00012d 70ef      	ANDI R30,LOW(0xF)
00012e 2fae      	MOV  R26,R30
00012f 81e8      	LD   R30,Y
000130 7fe0      	ANDI R30,LOW(0xF0)
000131 2bea      	OR   R30,R26
000132 bbe8      	OUT  0x18,R30
                +
000133 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000136 9ac2      	SBI  0x18,2
                +
000137 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000138 958a     +DEC R24
000139 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013a 98c2      	CBI  0x18,2
                +
00013b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013c 958a     +DEC R24
00013d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013e c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013f 93aa      	ST   -Y,R26
000140 81a8      	LD   R26,Y
000141 dfe9      	RCALL __lcd_write_nibble_G100
000142 81e8          ld    r30,y
000143 95e2          swap  r30
000144 83e8          st    y,r30
000145 81a8      	LD   R26,Y
000146 dfe4      	RCALL __lcd_write_nibble_G100
                +
000147 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000148 958a     +DEC R24
000149 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00014a c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014b 93aa      	ST   -Y,R26
00014c 81e8      	LD   R30,Y
00014d e0f0      	LDI  R31,0
00014e 57e8      	SUBI R30,LOW(-__base_y_G100)
00014f 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000150 81e0      	LD   R30,Z
000151 81a9      	LDD  R26,Y+1
000152 0fae      	ADD  R26,R30
000153 dfeb      	RCALL __lcd_write_data
000154 8059      	LDD  R5,Y+1
000155 8048      	LDD  R4,Y+0
000156 9622      	ADIW R28,2
000157 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000158 e0a2      	LDI  R26,LOW(2)
000159 d09b      	RCALL SUBOPT_0x6
00015a e0ac      	LDI  R26,LOW(12)
00015b dfe3      	RCALL __lcd_write_data
00015c e0a1      	LDI  R26,LOW(1)
00015d d097      	RCALL SUBOPT_0x6
00015e e0e0      	LDI  R30,LOW(0)
00015f 2e4e      	MOV  R4,R30
000160 2e5e      	MOV  R5,R30
000161 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000162 93aa      	ST   -Y,R26
000163 81a8      	LD   R26,Y
000164 30aa      	CPI  R26,LOW(0xA)
000165 f011      	BREQ _0x2000005
000166 1457      	CP   R5,R7
000167 f048      	BRLO _0x2000004
                 _0x2000005:
000168 e0e0      	LDI  R30,LOW(0)
000169 93ea      	ST   -Y,R30
00016a 9443      	INC  R4
00016b 2da4      	MOV  R26,R4
00016c dfde      	RCALL _lcd_gotoxy
00016d 81a8      	LD   R26,Y
00016e 30aa      	CPI  R26,LOW(0xA)
00016f f409      	BRNE _0x2000007
000170 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000171 9453      	INC  R5
000172 9ac0      	SBI  0x18,0
000173 81a8      	LD   R26,Y
000174 dfca      	RCALL __lcd_write_data
000175 98c0      	CBI  0x18,0
000176 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000177 93ba      	ST   -Y,R27
000178 93aa      	ST   -Y,R26
000179 931a      	ST   -Y,R17
                 _0x2000008:
00017a 81a9      	LDD  R26,Y+1
00017b 81ba      	LDD  R27,Y+1+1
00017c 91ed      	LD   R30,X+
00017d 83a9      	STD  Y+1,R26
00017e 83ba      	STD  Y+1+1,R27
00017f 2f1e      	MOV  R17,R30
000180 30e0      	CPI  R30,0
000181 f019      	BREQ _0x200000A
000182 2fa1      	MOV  R26,R17
000183 dfde      	RCALL _lcd_putchar
000184 cff5      	RJMP _0x2000008
                 _0x200000A:
000185 8118      	LDD  R17,Y+0
000186 9623      	ADIW R28,3
000187 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000188 93aa      	ST   -Y,R26
000189 b3e7      	IN   R30,0x17
00018a 6fe0      	ORI  R30,LOW(0xF0)
00018b bbe7      	OUT  0x17,R30
00018c 9aba      	SBI  0x17,2
00018d 9ab8      	SBI  0x17,0
00018e 9ab9      	SBI  0x17,1
00018f 98c2      	CBI  0x18,2
000190 98c0      	CBI  0x18,0
000191 98c1      	CBI  0x18,1
000192 8078      	LDD  R7,Y+0
000193 81e8      	LD   R30,Y
000194 58e0      	SUBI R30,-LOW(128)
                +
000195 93e0 018a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000197 81e8      	LD   R30,Y
000198 54e0      	SUBI R30,-LOW(192)
                +
000199 93e0 018b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019b e1a4      	LDI  R26,LOW(20)
00019c e0b0      	LDI  R27,0
00019d 940e 0201 	CALL _delay_ms
00019f d05a      	RCALL SUBOPT_0x7
0001a0 d059      	RCALL SUBOPT_0x7
0001a1 d058      	RCALL SUBOPT_0x7
0001a2 e2a0      	LDI  R26,LOW(32)
0001a3 df87      	RCALL __lcd_write_nibble_G100
                +
0001a4 ec88     +LDI R24 , LOW ( 200 )
0001a5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a6 9701     +SBIW R24 , 1
0001a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a8 e2a8      	LDI  R26,LOW(40)
0001a9 df95      	RCALL __lcd_write_data
0001aa e0a4      	LDI  R26,LOW(4)
0001ab df93      	RCALL __lcd_write_data
0001ac e8a5      	LDI  R26,LOW(133)
0001ad df91      	RCALL __lcd_write_data
0001ae e0a6      	LDI  R26,LOW(6)
0001af df8f      	RCALL __lcd_write_data
0001b0 dfa7      	RCALL _lcd_clear
                 _0x2020001:
0001b1 9621      	ADIW R28,1
0001b2 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _result_G000:
000176           	.BYTE 0x2
                 _arr_G000:
000178           	.BYTE 0xB
                 _test_G000:
000183           	.BYTE 0x1
                 _threshhold_G000:
000184           	.BYTE 0x2
                 _delay_time_G000:
000186           	.BYTE 0x2
                 __base_y_G100:
000188           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
0001b3 93ea      	ST   -Y,R30
0001b4 e0a1      	LDI  R26,LOW(1)
0001b5 df95      	RCALL _lcd_gotoxy
0001b6 91a0 0184 	LDS  R26,_threshhold_G000
0001b8 91b0 0185 	LDS  R27,_threshhold_G000+1
0001ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
0001bb eee8      	LDI  R30,LOW(1000)
0001bc e0f3      	LDI  R31,HIGH(1000)
0001bd 940e 020b 	CALL __DIVW21U
0001bf 01df      	MOVW R26,R30
0001c0 e0ea      	LDI  R30,LOW(10)
0001c1 e0f0      	LDI  R31,HIGH(10)
0001c2 940e 021e 	CALL __MODW21U
0001c4 58e8      	SUBI R30,LOW(-_arr_G000)
0001c5 4ffe      	SBCI R31,HIGH(-_arr_G000)
0001c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
0001c7 e6e4      	LDI  R30,LOW(100)
0001c8 e0f0      	LDI  R31,HIGH(100)
0001c9 940e 020b 	CALL __DIVW21U
0001cb 01df      	MOVW R26,R30
0001cc e0ea      	LDI  R30,LOW(10)
0001cd e0f0      	LDI  R31,HIGH(10)
0001ce 940e 021e 	CALL __MODW21U
0001d0 58e8      	SUBI R30,LOW(-_arr_G000)
0001d1 4ffe      	SBCI R31,HIGH(-_arr_G000)
0001d2 81a0      	LD   R26,Z
0001d3 df8e      	RCALL _lcd_putchar
0001d4 e0ee      	LDI  R30,LOW(14)
0001d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
0001d6 e0ea      	LDI  R30,LOW(10)
0001d7 e0f0      	LDI  R31,HIGH(10)
0001d8 940e 020b 	CALL __DIVW21U
0001da 01df      	MOVW R26,R30
0001db e0ea      	LDI  R30,LOW(10)
0001dc e0f0      	LDI  R31,HIGH(10)
0001dd 940e 021e 	CALL __MODW21U
0001df 58e8      	SUBI R30,LOW(-_arr_G000)
0001e0 4ffe      	SBCI R31,HIGH(-_arr_G000)
0001e1 81a0      	LD   R26,Z
0001e2 df7f      	RCALL _lcd_putchar
0001e3 e0ef      	LDI  R30,LOW(15)
0001e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001e5 e0ea      	LDI  R30,LOW(10)
0001e6 e0f0      	LDI  R31,HIGH(10)
0001e7 940e 021e 	CALL __MODW21U
0001e9 58e8      	SUBI R30,LOW(-_arr_G000)
0001ea 4ffe      	SBCI R31,HIGH(-_arr_G000)
0001eb 81a0      	LD   R26,Z
0001ec cf75      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
0001ed 93ea      	ST   -Y,R30
0001ee e0a0      	LDI  R26,LOW(0)
0001ef df5b      	RCALL _lcd_gotoxy
0001f0 91a0 0176 	LDS  R26,_result_G000
0001f2 91b0 0177 	LDS  R27,_result_G000+1
0001f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0001f5 df49      	RCALL __lcd_write_data
0001f6 e0a3      	LDI  R26,LOW(3)
0001f7 e0b0      	LDI  R27,0
0001f8 940c 0201 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0001fa e3a0      	LDI  R26,LOW(48)
0001fb df2f      	RCALL __lcd_write_nibble_G100
                +
0001fc ec88     +LDI R24 , LOW ( 200 )
0001fd e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001fe 9701     +SBIW R24 , 1
0001ff f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000200 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000201 9610      	adiw r26,0
000202 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000203 ed80     +LDI R24 , LOW ( 0x7D0 )
000204 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000205 9701     +SBIW R24 , 1
000206 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000207 95a8      	wdr
000208 9711      	sbiw r26,1
000209 f7c9      	brne __delay_ms0
                 __delay_ms1:
00020a 9508      	ret
                 
                 __DIVW21U:
00020b 2400      	CLR  R0
00020c 2411      	CLR  R1
00020d e190      	LDI  R25,16
                 __DIVW21U1:
00020e 0faa      	LSL  R26
00020f 1fbb      	ROL  R27
000210 1c00      	ROL  R0
000211 1c11      	ROL  R1
000212 1a0e      	SUB  R0,R30
000213 0a1f      	SBC  R1,R31
000214 f418      	BRCC __DIVW21U2
000215 0e0e      	ADD  R0,R30
000216 1e1f      	ADC  R1,R31
000217 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000218 60a1      	SBR  R26,1
                 __DIVW21U3:
000219 959a      	DEC  R25
00021a f799      	BRNE __DIVW21U1
00021b 01fd      	MOVW R30,R26
00021c 01d0      	MOVW R26,R0
00021d 9508      	RET
                 
                 __MODW21U:
00021e dfec      	RCALL __DIVW21U
00021f 01fd      	MOVW R30,R26
000220 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  11 r1 :   7 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  21 r25:   8 r26:  66 r27:  17 r28:   4 r29:   1 r30: 147 r31:  29 
x  :   6 y  :  58 z  :  14 
Registers used: 20 out of 35 (57.1%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  23 ld    :  33 ldd   :   7 ldi   :  82 
lds   :  12 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   6 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  47 pop   :   0 push  :   0 rcall :  48 ret   :  13 
reti  :   1 rjmp  :  15 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   9 sbic  :   0 sbis  :   2 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   2 sts   :   9 sub   :   1 subi  :   7 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000442   1026     64   1090   16384   6.7%
[.dseg] 0x000060 0x00018c      0     44     44    1024   4.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
