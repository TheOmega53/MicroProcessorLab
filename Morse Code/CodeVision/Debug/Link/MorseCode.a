;/*
; * Morse Code.c
; *
; * Created: 10/14/2019 12:06:55 AM
; * Author: Alireza
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdbool.h>
;#include <delay.h>
;
;static unsigned int time_count;
;static unsigned int blink;
;bool hold = false;
;
;bool isOpening = false;
;
;bool isResetting = false;
;//bool inputForReset = false;
;
;char code = 0b00001010;
;//char resetInput = 0b00000000;
;char input = 0b00000000;
;
;
;
;//External Interrupt 0, rising edge
;//In charge of accepting input
;interrupt [EXT_INT0] void ext_int0_isr (void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F      if (isOpening == false)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020     {
; 0000 0021         //If Authorized
; 0000 0022         if (PORTC.1 == 1)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0023         {
; 0000 0024             //Change the code
; 0000 0025             if(hold == true)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026             {
; 0000 0027                 code = code<<1;
;PCODE: $00000017 VOL: 0
; 0000 0028                 code |= 1UL << 0; //Enqueue 1
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0029             }
; 0000 002A             else
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002B             {
; 0000 002C                 code = code<<1;
;PCODE: $0000001D VOL: 0
; 0000 002D                 code &= ~(1UL << 0);  //Enqueue 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E             }
;PCODE: $00000021 VOL: 0
; 0000 002F         }
; 0000 0030         else  //if Input isn't for reset
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0031         {
; 0000 0032             //process the input
; 0000 0033             if(hold == true)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0034             {
; 0000 0035                 input = input<<1;
;PCODE: $00000027 VOL: 0
; 0000 0036                 input |= 1UL << 0; //Enqueue 1
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0037             }
; 0000 0038             else
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0039             {
; 0000 003A                 input = input<<1;
;PCODE: $0000002D VOL: 0
; 0000 003B                 input &= ~(1UL << 0);  //Enqueue 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003C             }
;PCODE: $00000031 VOL: 0
; 0000 003D 
; 0000 003E             //compare the input with the code
; 0000 003F             if(code == input)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040             {
; 0000 0041                 //give outgoting current to the door
; 0000 0042                 PORTC.0 = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0043 
; 0000 0044                 //mark the door as being opened
; 0000 0045                 isOpening = true;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0046 
; 0000 0047                 //Enable timer/counter0 overflow interrupt
; 0000 0048                 TIMSK=0x01;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0049                 hold = false;
;PCODE: $0000003B VOL: 0
; 0000 004A                 time_count = 0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004B             }
; 0000 004C             else
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004D             {
; 0000 004E                 //If code doesn't match, set output to 0
; 0000 004F                 PORTC.0 = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0050             }
;PCODE: $00000042 VOL: 0
; 0000 0051             //for testing purposes
; 0000 0052             PORTB = input;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0053         }
;PCODE: $00000045 VOL: 0
; 0000 0054         //for testing purposes
; 0000 0055         PORTA = code;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0056     }
; 0000 0057 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;
;//External Interrupt 1 , falling edge
;//In charge of checking if code is being reset
;interrupt [EXT_INT1] void ext_int1_isr (void)
; 0000 005D {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005E     //if the door isn't opening
; 0000 005F     if (isOpening == false)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0060     {
; 0000 0061         //Enable timer/counter0 overflow interrupt
; 0000 0062         TIMSK=0x01;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0063         hold = false;
;PCODE: $00000052 VOL: 0
; 0000 0064         time_count = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0065 
; 0000 0066         if (PORTC.1 == 1)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0067         {
; 0000 0068             if(isResetting == false)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0069             {
; 0000 006A                 //Enable input mode : reset
; 0000 006B                 isResetting = true;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006C                 input = 0b00000000;
;PCODE: $0000005C VOL: 0
; 0000 006D                 code = 0b00000000;
;PCODE: $0000005D VOL: 0
; 0000 006E             }
; 0000 006F         }
;PCODE: $0000005E VOL: 0
; 0000 0070         else if (isResetting == true)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0071         {
; 0000 0072             /*if PIND.0 isn't 1, disable reset state*/
; 0000 0073             isResetting = false;
;PCODE: $00000064 VOL: 0
; 0000 0074         }
; 0000 0075     }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0076 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0079 {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007A     // Count overflow times
; 0000 007B     ++time_count;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 007C     if ((time_count == 200)&(PORTC.0 == 0))
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 007D     {
; 0000 007E         //Reset timer/counter interrupt mask register
; 0000 007F         TIMSK=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0080         hold = true;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0081     }
; 0000 0082 
; 0000 0083     //after 1200 ticks of being open, close the door
; 0000 0084     if ((time_count == 500)&(PORTC.0 == 1))
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0085     {
; 0000 0086         //Reset timer/counter interrupt mask register
; 0000 0087         TIMSK=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0088         isOpening = false;
;PCODE: $0000008C VOL: 0
; 0000 0089         //Close the outgoing current
; 0000 008A         PORTC.0 = 0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 008B 
; 0000 008C         //For testing purposes
; 0000 008D         input = 0b00000000;
;PCODE: $0000008F VOL: 0
; 0000 008E         PORTB = 0b00000000;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008F     }
; 0000 0090 }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;
;void main(void)
; 0000 0094 {
;PCODE: $00000096 VOL: 0
; 0000 0095     blink = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0096 
; 0000 0097     //Set timer/counter Control Register to use clk/8 prescaler
; 0000 0098     TCCR0=0x02;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0099 
; 0000 009A     //Enable Watchdog Timer and set time-out time at ~2.2s
; 0000 009B     WDTCR = 0x0f;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009C 
; 0000 009D     //Enable Interrupts 0 & 1
; 0000 009E     //11000000
; 0000 009F     GICR=0xc0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A0 
; 0000 00A1     //Set Interrupt 1 to trigger on falling edge
; 0000 00A2     //Set Interrupt 0 to trigger on rising edge
; 0000 00A3     //00001011
; 0000 00A4     MCUCR=0x0b;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A5 
; 0000 00A6     //Enable global interrupt mask
; 0000 00A7     #asm("sei");
;PCODE: $000000A1 VOL: 0
	sei
;PCODE: $000000A2 VOL: 0
; 0000 00A8 
; 0000 00A9     //Set DDRC.0 as output
; 0000 00AA     DDRC.0 = 1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AB     //Set DDRC.1 as output
; 0000 00AC     DDRC.1 = 1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00AD 
; 0000 00AE     DDRC.7 = 1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00AF 
; 0000 00B0     //Set DDRA as all output
; 0000 00B1     DDRA = 0xff;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B2     //Set DDRB as all output
; 0000 00B3     DDRB = 0xff;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00B4 
; 0000 00B5     //Set DDRD.0 as input
; 0000 00B6     DDRD.0 = 0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00B7     PORTD.0 = 1;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B8 
; 0000 00B9     //Set DDRD.2 as input
; 0000 00BA     DDRD.2 = 0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00BB     PORTD.2 = 1;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00BC     //Set DDRD.3 as input
; 0000 00BD     DDRD.3 = 0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BE     PORTD.3 = 1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00BF 
; 0000 00C0     //Set PORTA as to predefined Code
; 0000 00C1     PORTA = code;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00C2 
; 0000 00C3     //Set PORTC.1 to 0
; 0000 00C4     PORTC.1 = 0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00C5 
; 0000 00C6     PORTC.7 = 0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00C7 
; 0000 00C8 
; 0000 00C9     // External Interrupt(s) initialization
; 0000 00CA     // INT0: On
; 0000 00CB     // INT0 Mode: Rising Edge
; 0000 00CC     // INT1: On
; 0000 00CD     // INT1 Mode: Falling Edge
; 0000 00CE     // INT2: Off
; 0000 00CF     GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00D0     MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D1     MCUCSR=(0<<ISC2);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D2     GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D3 
; 0000 00D4     while (1)
;PCODE: $000000C8 VOL: 0
; 0000 00D5     {
; 0000 00D6         //Reset Watchdog timer
; 0000 00D7         #asm("wdr");
;PCODE: $000000C9 VOL: 0
	wdr
;PCODE: $000000CA VOL: 0
; 0000 00D8 
; 0000 00D9 
; 0000 00DA         if(++blink >= 10000){
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DB             PORTC.7 = ~PORTC.7;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00DC             blink = 0;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00DD         }
; 0000 00DE 
; 0000 00DF         //
; 0000 00E0         if (PIND.0 == 0){
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00E1             PORTC.1 = 1;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00E2         } else {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E3             PORTC.1 = 0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E4         }
;PCODE: $000000E7 VOL: 0
; 0000 00E5     }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E6 }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
